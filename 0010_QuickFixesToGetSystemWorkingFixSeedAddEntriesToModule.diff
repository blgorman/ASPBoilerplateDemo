diff --git a/src/MGS.BoilerplateDemo.EntityFrameworkCore/EntityFrameworkCore/Seed/Host/DefaultListAndListItemsCreator.cs b/src/MGS.BoilerplateDemo.EntityFrameworkCore/EntityFrameworkCore/Seed/Host/DefaultListAndListItemsCreator.cs
index b90db59..c27b0d0 100644
--- a/src/MGS.BoilerplateDemo.EntityFrameworkCore/EntityFrameworkCore/Seed/Host/DefaultListAndListItemsCreator.cs
+++ b/src/MGS.BoilerplateDemo.EntityFrameworkCore/EntityFrameworkCore/Seed/Host/DefaultListAndListItemsCreator.cs
@@ -28,6 +28,10 @@ namespace MGS.BoilerplateDemo.EntityFrameworkCore.Seed.Host
 
         private void CreateList(string key, string displayName, string description)
         {
+            var existing = _context.OptionLists.ToList();
+            var exists = existing.FirstOrDefault(x => x.DisplayName.Equals(displayName, StringComparison.OrdinalIgnoreCase));
+            if (exists != null) return;
+
             var ol = new OptionList()
             {
                 DisplayName = displayName,
diff --git a/src/MGS.BoilerplateDemo.Web.Host/src/app/app.module.ts b/src/MGS.BoilerplateDemo.Web.Host/src/app/app.module.ts
index c4b337d..ab8e529 100644
--- a/src/MGS.BoilerplateDemo.Web.Host/src/app/app.module.ts
+++ b/src/MGS.BoilerplateDemo.Web.Host/src/app/app.module.ts
@@ -120,7 +120,23 @@ import { HostEditOptionListItemsDialogComponent } from './host/optionlistitems/e
     // users
     CreateUserDialogComponent,
     EditUserDialogComponent,
-    ResetPasswordDialogComponent
+    ResetPasswordDialogComponent,
+    //option lists tenant level
+    OptionListsComponent,
+    CreateOptionListDialogComponent,
+    EditOptionListDialogComponent,
+    // option list items
+    OptionListItemsComponent,
+    CreateOptionListItemsDialogComponent,
+    EditOptionListItemsDialogComponent,
+    //host option lists
+    HostOptionListsComponent,
+    HostCreateOptionListDialogComponent,
+    HostEditOptionListDialogComponent,
+    //host option list items
+    HostOptionListItemsComponent,
+    HostCreateOptionListItemsDialogComponent,
+    HostEditOptionListItemsDialogComponent
   ]
 })
 export class AppModule {}
diff --git a/src/MGS.BoilerplateDemo.Web.Host/src/app/host/optionlists/hostoptionlists.component.html b/src/MGS.BoilerplateDemo.Web.Host/src/app/host/optionlists/hostoptionlists.component.html
index 6e4216f..0df689e 100644
--- a/src/MGS.BoilerplateDemo.Web.Host/src/app/host/optionlists/hostoptionlists.component.html
+++ b/src/MGS.BoilerplateDemo.Web.Host/src/app/host/optionlists/hostoptionlists.component.html
@@ -1 +1,109 @@
-<h1>Host Option Lists</h1>
\ No newline at end of file
+<div class="row clearfix" [@routerTransition]>
+    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
+      <div class="card main-content">
+        <div class="header">
+          <h2>{{ "OptionListsAll" | localize }}</h2>
+          <ul class="header-dropdown m-r--5">
+            <li>
+              <button
+                mat-icon-button
+                [matMenuTriggerFor]="headerMenu"
+                class="header-dropdown-mat-icon-button"
+              >
+                <mat-icon>more_vert</mat-icon>
+              </button>
+              <mat-menu #headerMenu="matMenu">
+                <button mat-menu-item (click)="refresh()">
+                  <mat-icon>refresh</mat-icon>
+                  <span>{{ "Refresh" | localize }}</span>
+                </button>
+              </mat-menu>
+            </li>
+          </ul>
+        </div>
+        <div class="body table-responsive">
+          <table class="table table-hover table-striped" [busy]="isTableLoading">
+            <thead>
+              <tr>
+                <th>{{ "Option List Key" | localize }}</th>
+                <th>{{ "Name" | localize }}</th>
+                <th>{{ "Description" | localize }}</th>
+                <th>
+                  <div style="text-align:center">{{ "IsActive" | localize }}</div>
+                </th>
+                <th>{{ "Actions" | localize }}</th>
+              </tr>
+            </thead>
+            <tbody>
+              <tr
+                *ngFor="
+                  let optionList of (optionLists
+                    | paginate
+                      : {
+                          id: 'server',
+                          itemsPerPage: pageSize,
+                          currentPage: pageNumber,
+                          totalItems: totalItems
+                        })
+                "
+              >
+                <td>{{ optionList.optionListKey }}</td>
+                <td>{{ optionList.displayName }}</td>
+                <td>{{ optionList.description }}</td>
+                <td align="center">
+                  <i
+                    class="material-icons"
+                    *ngIf="optionList.isActive"
+                    style="color:green;"
+                  >
+                    check_box
+                  </i>
+                  <i
+                    class="material-icons"
+                    *ngIf="!optionList.isActive"
+                    style="color:red;"
+                  >
+                    indeterminate_check_box
+                  </i>
+                </td>
+                <td>
+                  <button class="action-button" mat-icon-button [matMenuTriggerFor]="actionsMenu">
+                    <mat-icon>menu</mat-icon>
+                  </button>
+                  <mat-menu #actionsMenu="matMenu">
+                    <button mat-menu-item (click)="editOptionList(optionList)">
+                      <mat-icon>edit</mat-icon>
+                      <span>{{ "Edit" | localize }}</span>
+                    </button>
+                    <button mat-menu-item (click)="delete(optionList)">
+                      <mat-icon>delete</mat-icon>
+                      <span>{{ "Delete" | localize }}</span>
+                    </button>
+                  </mat-menu>
+                </td>
+              </tr>
+            </tbody>
+          </table>
+          <div
+            class="abp-pagination-controls-wrapper"
+            *ngIf="totalItems > pageSize"
+          >
+            <abp-pagination-controls
+              (pageChange)="getDataPage($event)"
+              id="server"
+            >
+            </abp-pagination-controls>
+          </div>
+          <button
+            mat-mini-fab
+            color="primary"
+            class="pull-right"
+            (click)="createOptionList()"
+          >
+            <mat-icon>add</mat-icon>
+          </button>
+        </div>
+      </div>
+    </div>
+  </div>
+  
\ No newline at end of file
diff --git a/src/MGS.BoilerplateDemo.Web.Host/src/app/host/optionlists/hostoptionlists.component.ts b/src/MGS.BoilerplateDemo.Web.Host/src/app/host/optionlists/hostoptionlists.component.ts
index 75b9571..a8dcb85 100644
--- a/src/MGS.BoilerplateDemo.Web.Host/src/app/host/optionlists/hostoptionlists.component.ts
+++ b/src/MGS.BoilerplateDemo.Web.Host/src/app/host/optionlists/hostoptionlists.component.ts
@@ -1,7 +1,11 @@
 import { Component, Injector } from "@angular/core";
 import { appModuleAnimation } from "@shared/animations/routerTransition";
 import { PagedListingComponentBase, PagedRequestDto } from "@shared/paged-listing-component-base";
-import { OptionListViewDto } from "@shared/service-proxies/service-proxies";
+import { OptionListViewDto, OptionListServiceProxy, PagedResultDtoOfOptionListViewDto } from "@shared/service-proxies/service-proxies";
+import { MatDialog } from "@angular/material";
+import { finalize } from "rxjs/operators";
+import { HostCreateOptionListDialogComponent } from "./create/create-hostoptionlist-dialog.component";
+import { HostEditOptionListDialogComponent } from "./edit/edit-hostoptionlist-dialog.component";
 
 class PagedOptionListRequestDto extends PagedRequestDto {
     keyword: string;
@@ -19,18 +23,63 @@ export class HostOptionListsComponent extends PagedListingComponentBase<OptionLi
 
     constructor(
         injector: Injector,
+        private _optionListService: OptionListServiceProxy,
+        private _dialog: MatDialog
     ) {
         super(injector);
     }
 
-    protected list(
-            request: PagedOptionListRequestDto, 
-            pageNumber: number, 
-            finishedCallback: Function): void {
-        throw new Error("Method not implemented.");
+    protected list(request: PagedOptionListRequestDto, pageNumber: number, finishedCallback: Function): void {
+        this._optionListService
+            .getAll(request.filter, request.keyword, request.sorting, request.skipCount, request.maxResultCount)
+            .pipe(
+                finalize(() => {
+                    finishedCallback();
+                })
+            )
+            .subscribe((result: PagedResultDtoOfOptionListViewDto) => {
+                this.optionLists = result.items;
+                console.log(this.optionLists);
+                this.showPaging(result, pageNumber);
+        });
     }
 
-    protected delete(entity: OptionListViewDto): void {
-        throw new Error("Method not implemented.");
+    protected delete(optionList: OptionListViewDto): void {
+        abp.message.confirm(
+            this.l('AreYouSureWantToDelete', optionList.displayName),
+            (result: boolean) => {
+                if (result) {
+                    this._optionListService.deleteList(optionList.id).subscribe(() => {
+                        abp.notify.success(this.l('SuccessfullyDeleted'));
+                        this.refresh();
+                    });
+                }
+            }
+        );
+    }
+
+    createOptionList(): void {
+        this.showCreateOrEditOptionListDialog();
+    }
+
+    editOptionList(optionList: OptionListViewDto): void {
+        this.showCreateOrEditOptionListDialog(optionList.id);
+    }
+
+    showCreateOrEditOptionListDialog(id?: number): void {
+        let createOrEditOptionListDialog;
+        if (id === undefined || id <= 0) {
+            createOrEditOptionListDialog = this._dialog.open(HostCreateOptionListDialogComponent);
+        } else {
+            createOrEditOptionListDialog = this._dialog.open(HostEditOptionListDialogComponent, {
+                data: id
+            });
+        }
+
+        createOrEditOptionListDialog.afterClosed().subscribe(result => {
+            if (result) {
+                this.refresh();
+            }
+        });
     }
 }
diff --git a/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlistitems/optionlistitems.component.html b/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlistitems/optionlistitems.component.html
index 87311af..8542c36 100644
--- a/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlistitems/optionlistitems.component.html
+++ b/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlistitems/optionlistitems.component.html
@@ -1 +1,111 @@
-<h1>Option List Items Component</h1>
\ No newline at end of file
+<div class="row clearfix" [@routerTransition]>
+    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
+      <div class="card main-content">
+        <div class="header">
+          <h2>{{ "OptionListItems" | localize }}</h2>
+          <ul class="header-dropdown m-r--5">
+            <li>
+              <button
+                mat-icon-button
+                [matMenuTriggerFor]="headerMenu"
+                class="header-dropdown-mat-icon-button"
+              >
+                <mat-icon>more_vert</mat-icon>
+              </button>
+              <mat-menu #headerMenu="matMenu">
+                <button mat-menu-item (click)="refresh()">
+                  <mat-icon>refresh</mat-icon>
+                  <span>{{ "Refresh" | localize }}</span>
+                </button>
+              </mat-menu>
+            </li>
+          </ul>
+        </div>
+        <div class="body table-responsive">
+          <table class="table table-hover table-striped" [busy]="isTableLoading">
+            <thead>
+              <tr>
+                <th>{{ "Option List Id" | localize }}</th>
+                <th>{{ "Name" | localize }}</th>
+                <th>{{ "Additional Info" | localize }}</th>
+                <th>{{ "Display Order" | localize }}</th>
+                <th>
+                  <div style="text-align:center">{{ "IsActive" | localize }}</div>
+                </th>
+                <th>{{ "Actions" | localize }}</th>
+              </tr>
+            </thead>
+            <tbody>
+              <tr
+                *ngFor="
+                  let optionListItem of (optionListItems
+                    | paginate
+                      : {
+                          id: 'server',
+                          itemsPerPage: pageSize,
+                          currentPage: pageNumber,
+                          totalItems: totalItems
+                        })
+                "
+              >
+                <td>{{ optionListItem.optionListId }}</td>
+                <td>{{ optionListItem.displayText }}</td>
+                <td>{{ optionListItem.additionalInfo }}</td>
+                <td>{{ optionListItem.displayOrder }}</td>
+                <td align="center">
+                  <i
+                    class="material-icons"
+                    *ngIf="optionListItem.isActive"
+                    style="color:green;"
+                  >
+                    check_box
+                  </i>
+                  <i
+                    class="material-icons"
+                    *ngIf="!optionListItem.isActive"
+                    style="color:red;"
+                  >
+                    indeterminate_check_box
+                  </i>
+                </td>
+                <td>
+                  <button class="action-button" mat-icon-button [matMenuTriggerFor]="actionsMenu">
+                    <mat-icon>menu</mat-icon>
+                  </button>
+                  <mat-menu #actionsMenu="matMenu">
+                    <button mat-menu-item (click)="editOptionListItem(optionListItem)">
+                      <mat-icon>edit</mat-icon>
+                      <span>{{ "Edit" | localize }}</span>
+                    </button>
+                    <button mat-menu-item (click)="delete(optionListItem)">
+                      <mat-icon>delete</mat-icon>
+                      <span>{{ "Delete" | localize }}</span>
+                    </button>
+                  </mat-menu>
+                </td>
+              </tr>
+            </tbody>
+          </table>
+          <div
+            class="abp-pagination-controls-wrapper"
+            *ngIf="totalItems > pageSize"
+          >
+            <abp-pagination-controls
+              (pageChange)="getDataPage($event)"
+              id="server"
+            >
+            </abp-pagination-controls>
+          </div>
+          <button
+            mat-mini-fab
+            color="primary"
+            class="pull-right"
+            (click)="createOptionListItem()"
+          >
+            <mat-icon>add</mat-icon>
+          </button>
+        </div>
+      </div>
+    </div>
+  </div>
+  
\ No newline at end of file
diff --git a/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlistitems/optionlistitems.component.ts b/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlistitems/optionlistitems.component.ts
index 1256229..6276380 100644
--- a/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlistitems/optionlistitems.component.ts
+++ b/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlistitems/optionlistitems.component.ts
@@ -1,8 +1,11 @@
 import { Component, Injector } from "@angular/core";
 import { appModuleAnimation } from "@shared/animations/routerTransition";
 import { PagedListingComponentBase, PagedRequestDto } from "@shared/paged-listing-component-base";
-import { OptionListItemViewDto, OptionListItemsServiceProxy } from "@shared/service-proxies/service-proxies";
+import { OptionListItemViewDto, OptionListItemsServiceProxy, PagedResultDtoOfOptionListItemViewDto } from "@shared/service-proxies/service-proxies";
 import { MatDialog } from "@angular/material";
+import { finalize } from "rxjs/operators";
+import { CreateOptionListItemsDialogComponent } from "./create/create-optionlistitems-dialog.component";
+import { EditOptionListItemsDialogComponent } from "./edit/edit-optionlistitems-dialog.component";
 
 class PagedOptionListItemRequestDto extends PagedRequestDto {
     filter: string;
@@ -16,21 +19,70 @@ class PagedOptionListItemRequestDto extends PagedRequestDto {
     animations: [appModuleAnimation()]
 })
 export class OptionListItemsComponent extends PagedListingComponentBase<OptionListItemViewDto> {
-
     optionListItems: OptionListItemViewDto[] = [];
 
-    constructor(injector: Injector,
-                private _optionListItemService: OptionListItemsServiceProxy,
-                private _dialog: MatDialog) 
-    {
+    constructor(
+        injector: Injector,
+        private _optionListItemService: OptionListItemsServiceProxy,
+        private _dialog: MatDialog
+    ) {
         super(injector);
     }
 
-    protected list(request: PagedOptionListItemRequestDto, pageNumber: number, finishedCallback: Function): void {
-        throw new Error("Method not implemented.");
+    list(
+        request: PagedOptionListItemRequestDto,
+        pageNumber: number,
+        finishedCallback: Function
+    ): void {
+        this._optionListItemService
+            .getAllOptionListItems(request.filter, request.key, request.sorting, request.skipCount, request.maxResultCount)
+            .pipe(
+                finalize(() => {
+                    finishedCallback();
+                })
+            )
+            .subscribe((result: PagedResultDtoOfOptionListItemViewDto) => {
+                this.optionListItems = result.items;
+                this.showPaging(result, pageNumber);
+            });
+    }
+
+    delete(optionListItem: OptionListItemViewDto): void {
+        abp.message.confirm(
+            this.l('AreYouSureWantToDelete', optionListItem.displayText),
+            (result: boolean) => {
+                if (result) {
+                    this._optionListItemService.deleteListItem(optionListItem.id).subscribe(() => {
+                        abp.notify.success(this.l('SuccessfullyDeleted'));
+                        this.refresh();
+                    });
+                }
+            }
+        );
+    }
+
+    createOptionListItem(): void {
+        this.showCreateOrEditOptionListItemDialog();
+    }
+
+    editOptionListItem(optionListItem: OptionListItemViewDto): void {
+        this.showCreateOrEditOptionListItemDialog(optionListItem.id);
     }
 
-    protected delete(entity: OptionListItemViewDto): void {
-        throw new Error("Method not implemented.");
+    showCreateOrEditOptionListItemDialog(id?: number): void {
+        let createOrEditOptionListItemDialog;
+        if (id === undefined || id <= 0) {
+            createOrEditOptionListItemDialog = this._dialog.open(CreateOptionListItemsDialogComponent);
+        } else {
+            createOrEditOptionListItemDialog = this._dialog.open(EditOptionListItemsDialogComponent, {
+                data: id
+            });
+        }
+
+        createOrEditOptionListItemDialog.afterClosed().subscribe(result => {
+            if (result) {
+                this.refresh();
+            }
+        });
     }
 }
\ No newline at end of file
diff --git a/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlists/optionlists.component.html b/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlists/optionlists.component.html
index 6a2348b..a8c029e 100644
--- a/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlists/optionlists.component.html
+++ b/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlists/optionlists.component.html
@@ -1 +1,111 @@
-<h1>Tenant Option Lists</h1>
\ No newline at end of file
+<div class="row clearfix" [@routerTransition]>
+    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
+      <div class="card main-content">
+        <div class="header">
+          <h2>{{ "OptionLists" | localize }}</h2>
+          <ul class="header-dropdown m-r--5">
+            <li>
+              <button
+                mat-icon-button
+                [matMenuTriggerFor]="headerMenu"
+                class="header-dropdown-mat-icon-button"
+              >
+                <mat-icon>more_vert</mat-icon>
+              </button>
+              <mat-menu #headerMenu="matMenu">
+                <button mat-menu-item (click)="refresh()">
+                  <mat-icon>refresh</mat-icon>
+                  <span>{{ "Refresh" | localize }}</span>
+                </button>
+              </mat-menu>
+            </li>
+          </ul>
+        </div>
+        <div class="body table-responsive">
+          <table class="table table-hover table-striped" [busy]="isTableLoading">
+            <thead>
+              <tr>
+                <th>{{ "Option List Id" | localize }}</th>
+                <th>{{ "Option List Key" | localize }}</th>
+                <th>{{ "Name" | localize }}</th>
+                <th>{{ "Description" | localize }}</th>
+                <th>
+                  <div style="text-align:center">{{ "IsActive" | localize }}</div>
+                </th>
+                <th>{{ "Actions" | localize }}</th>
+              </tr>
+            </thead>
+            <tbody>
+              <tr
+                *ngFor="
+                  let optionList of (optionLists
+                    | paginate
+                      : {
+                          id: 'server',
+                          itemsPerPage: pageSize,
+                          currentPage: pageNumber,
+                          totalItems: totalItems
+                        })
+                "
+              >
+                <td>{{ optionList.id }}</td>
+                <td>{{ optionList.optionListKey }}</td>
+                <td>{{ optionList.displayName }}</td>
+                <td>{{ optionList.description }}</td>
+                <td align="center">
+                  <i
+                    class="material-icons"
+                    *ngIf="optionList.isActive"
+                    style="color:green;"
+                  >
+                    check_box
+                  </i>
+                  <i
+                    class="material-icons"
+                    *ngIf="!optionList.isActive"
+                    style="color:red;"
+                  >
+                    indeterminate_check_box
+                  </i>
+                </td>
+                <td>
+                  <button class="action-button" mat-icon-button [matMenuTriggerFor]="actionsMenu">
+                    <mat-icon>menu</mat-icon>
+                  </button>
+                  <mat-menu #actionsMenu="matMenu">
+                    <button mat-menu-item (click)="editOptionList(optionList)">
+                      <mat-icon>edit</mat-icon>
+                      <span>{{ "Edit" | localize }}</span>
+                    </button>
+                    <button mat-menu-item (click)="delete(optionList)">
+                      <mat-icon>delete</mat-icon>
+                      <span>{{ "Delete" | localize }}</span>
+                    </button>
+                  </mat-menu>
+                </td>
+              </tr>
+            </tbody>
+          </table>
+          <div
+            class="abp-pagination-controls-wrapper"
+            *ngIf="totalItems > pageSize"
+          >
+            <abp-pagination-controls
+              (pageChange)="getDataPage($event)"
+              id="server"
+            >
+            </abp-pagination-controls>
+          </div>
+          <button
+            mat-mini-fab
+            color="primary"
+            class="pull-right"
+            (click)="createOptionList()"
+          >
+            <mat-icon>add</mat-icon>
+          </button>
+        </div>
+      </div>
+    </div>
+  </div>
+  
\ No newline at end of file
diff --git a/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlists/optionlists.component.ts b/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlists/optionlists.component.ts
index adcfb20..c5ec577 100644
--- a/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlists/optionlists.component.ts
+++ b/src/MGS.BoilerplateDemo.Web.Host/src/app/optionlists/optionlists.component.ts
@@ -1,10 +1,14 @@
 import { Component, Injector } from "@angular/core";
 import { appModuleAnimation } from "@shared/animations/routerTransition";
 import { PagedListingComponentBase, PagedRequestDto } from "@shared/paged-listing-component-base";
-import { OptionListViewDto } from "@shared/service-proxies/service-proxies";
+import { OptionListViewDto, OptionListServiceProxy, PagedResultDtoOfOptionListViewDto } from "@shared/service-proxies/service-proxies";
+import { MatDialog } from "@angular/material";
+import { finalize } from "rxjs/operators";
+import { CreateOptionListDialogComponent } from "./create/create-optionlist-dialog.component";
+import { EditOptionListDialogComponent } from "./edit/edit-optionlist-dialog.component";
 
 class PagedOptionListRequestDto extends PagedRequestDto {
-    keyword: string;
+    key: string;
     filter: string;
     sorting: string;
 }
@@ -15,22 +19,66 @@ class PagedOptionListRequestDto extends PagedRequestDto {
     styleUrls: ['./optionlists.component.less']
 })
 export class OptionListsComponent extends PagedListingComponentBase<OptionListViewDto> {
-
     optionLists: OptionListViewDto[] = [];
 
     constructor(
         injector: Injector,
+        private _optionListService: OptionListServiceProxy,
+        private _dialog: MatDialog
     ) {
         super(injector);
     }
 
-    protected list(request: PagedOptionListRequestDto
-                    , pageNumber: number
-                    , finishedCallback: Function): void {
-        throw new Error("Method not implemented.");
+    list(request: PagedOptionListRequestDto, pageNumber: number, finishedCallback: Function): void {
+        this._optionListService
+            .getAll(request.filter, request.key, request.sorting, request.skipCount, request.maxResultCount)
+            .pipe(
+                finalize(() => {
+                    finishedCallback();
+                })
+            )
+            .subscribe((result: PagedResultDtoOfOptionListViewDto) => {
+                this.optionLists = result.items;
+                this.showPaging(result, pageNumber);
+            });
+    }
+
+    protected delete(optionList: OptionListViewDto): void {
+        abp.message.confirm(
+            this.l('AreYouSureWantToDelete', optionList.displayName),
+            (result: boolean) => {
+                if (result) {
+                    this._optionListService.deleteList(optionList.id).subscribe(() => {
+                        abp.notify.success(this.l('SuccessfullyDeleted'));
+                        this.refresh();
+                    });
+                }
+            }
+        );
+    }
+
+    createOptionList(): void {
+        this.showCreateOrEditOptionListDialog();
     }
-    
-    protected delete(entity: OptionListViewDto): void {
-        throw new Error("Method not implemented.");
+
+    editOptionList(optionList: OptionListViewDto): void {
+        this.showCreateOrEditOptionListDialog(optionList.id);
+    }
+
+    showCreateOrEditOptionListDialog(id?: number): void {
+        let createOrEditOptionListDialog;
+        if (id === undefined || id <= 0) {
+            createOrEditOptionListDialog = this._dialog.open(CreateOptionListDialogComponent);
+        } else {
+            createOrEditOptionListDialog = this._dialog.open(EditOptionListDialogComponent, {
+                data: id
+            });
+        }
+
+        createOrEditOptionListDialog.afterClosed().subscribe(result => {
+            if (result) {
+                this.refresh();
+            }
+        });
     }
 }
\ No newline at end of file
